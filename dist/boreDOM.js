#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// boreDOMCLI/generated_cli.js
var generated_cli_exports = {};
__export(generated_cli_exports, {
  BUILD_DIR: () => BUILD_DIR,
  build: () => build,
  buildRelativeServePath: () => buildRelativeServePath,
  copyBoreDOM: () => copyBoreDOM,
  getServePaths: () => getServePaths,
  normalizeServePath: () => normalizeServePath,
  options: () => options,
  processComponents: () => processComponents,
  setServePaths: () => setServePaths,
  updateIndex: () => updateIndex
});
module.exports = __toCommonJS(generated_cli_exports);
var import_fs_extra = __toESM(require("fs-extra"));
var import_mime_types = __toESM(require("mime-types"));
var import_path = __toESM(require("path"));
var glob = __toESM(require("glob"));
var cheerio = __toESM(require("cheerio"));
var import_commander = require("commander");
var import_http = __toESM(require("http"));
var import_finalhandler = __toESM(require("finalhandler"));
var import_js_beautify = __toESM(require("js-beautify"));
var import_chokidar = __toESM(require("chokidar"));
var import_serve_handler = __toESM(require("serve-handler"));
var boredom = `

`;
var beautify = import_js_beautify.default.html;
var BUILD_DIR = "build";
var serverStarted = false;
var numberOfRefreshes = 0;
console.log("## boreDOM CLI options");
console.log(
  "## ",
  "--index <path to default html>",
  "The base HTML file to serve",
  "defaults to ./index.html"
);
console.log(
  "## ",
  "--html <folder>",
  "Folder containing HTML component files",
  'defaults to "./components"'
);
console.log(
  "## ",
  "--static <folder>",
  "Static files folder, all files in here are copied as is",
  'defaults to "./public"'
);
import_commander.program.option("--index <path to file>", "Index file to serve", "index.html").option(
  "--html <folder>",
  "Folder containing HTML component files",
  "components"
).option(
  "--static <folder>",
  "Folder containing static files to be copied as is",
  "public"
).option(
  "--components-serve <folder>",
  "Build subfolder used to serve processed components",
  "components"
).option(
  "--static-serve <folder>",
  "Build subfolder used to serve static assets",
  "static"
);
var isTestMode = Boolean(process.env.BOREDOM_CLI_TEST_MODE);
if (isTestMode) {
  import_commander.program.parse([], { from: "user" });
} else {
  import_commander.program.parse(process.argv);
}
var options = import_commander.program.opts();
function sanitizeServeInput(value) {
  const normalizedSlashes = value.replace(/\\+/g, "/").trim();
  if (!normalizedSlashes) {
    return { fsPath: "", urlPath: "" };
  }
  if (["/", "./"].includes(normalizedSlashes)) {
    return { fsPath: "", urlPath: "/" };
  }
  let working = normalizedSlashes;
  while (working.startsWith("./")) {
    working = working.slice(2);
  }
  const isAbsolute = working.startsWith("/");
  if (isAbsolute) {
    working = working.replace(/^\/+/, "");
  }
  working = working.replace(/\/+$/, "");
  const fsPath = working;
  if (!fsPath) {
    return { fsPath: "", urlPath: isAbsolute ? "/" : "" };
  }
  const urlPath = isAbsolute ? `/${fsPath}` : fsPath;
  return { fsPath, urlPath };
}
function normalizeServePath(input, fallback) {
  if (typeof input === "undefined" || input === null) {
    return sanitizeServeInput(fallback);
  }
  const trimmed = String(input).trim();
  if (!trimmed) {
    return sanitizeServeInput(fallback);
  }
  return sanitizeServeInput(trimmed);
}
function buildRelativeServePath(base, ...segments) {
  const cleanSegments = segments.filter(Boolean).map((segment) => {
    return segment.replace(/^\/+/, "").replace(/\/+$/, "");
  });
  if (!base || base === ".") {
    return cleanSegments.join("/");
  }
  if (base === "/") {
    const joined = cleanSegments.join("/");
    return joined ? `/${joined}` : "/";
  }
  const cleanBase = base.replace(/\/+$/, "");
  return [cleanBase, ...cleanSegments].join("/");
}
var componentsServePath;
var staticServePath;
var componentsServeUrlPath;
var staticServeUrlPath;
function setServePaths(currentOptions = options) {
  const componentsPaths = normalizeServePath(
    currentOptions.componentsServe,
    "components"
  );
  const staticPaths = normalizeServePath(currentOptions.staticServe, "static");
  componentsServePath = componentsPaths.fsPath;
  componentsServeUrlPath = componentsPaths.urlPath;
  staticServePath = staticPaths.fsPath;
  staticServeUrlPath = staticPaths.urlPath;
  return {
    componentsServePath,
    componentsServeUrlPath,
    staticServePath,
    staticServeUrlPath
  };
}
function getServePaths() {
  return {
    componentsServePath,
    componentsServeUrlPath,
    staticServePath,
    staticServeUrlPath
  };
}
setServePaths();
async function copyStatic() {
  const staticDir = import_path.default.resolve(options.static);
  if (await import_fs_extra.default.pathExists(staticDir)) {
    await import_fs_extra.default.copy(staticDir, import_path.default.join(BUILD_DIR, staticServePath));
    console.log("Static folder copied.");
  }
}
async function copyBoreDOM() {
  return import_fs_extra.default.writeFile(import_path.default.join(BUILD_DIR, "boreDOM.js"), atob(boredom));
}
async function processComponents() {
  let components = {};
  if (options.html) {
    const htmlFolder = import_path.default.resolve(options.html);
    const htmlFiles = glob.sync("**/*.html", { cwd: htmlFolder });
    for (const file of htmlFiles) {
      const filePath = import_path.default.join(htmlFolder, file);
      const content = await import_fs_extra.default.readFile(filePath, "utf-8");
      const $ = cheerio.load(content, { decodeEntities: false });
      const template = $("template[data-component]");
      if (template.length) {
        const componentName = template.attr("data-component");
        const fullTemplate = $.html(template);
        const componentBuildDir = import_path.default.join(
          BUILD_DIR,
          componentsServePath,
          componentName
        );
        await import_fs_extra.default.ensureDir(componentBuildDir);
        const destHtmlPath = import_path.default.join(
          componentBuildDir,
          `${componentName}.html`
        );
        await import_fs_extra.default.copy(filePath, destHtmlPath);
        const componentDir = import_path.default.dirname(filePath);
        const jsMatch = glob.sync(`**/${componentName}.js`, {
          cwd: componentDir
        });
        const cssMatch = glob.sync(`**/${componentName}.css`, {
          cwd: componentDir
        });
        const hasJS = jsMatch.length > 0;
        if (jsMatch.length > 0) {
          const jsSrc = import_path.default.join(componentDir, jsMatch[0]);
          const destJsPath = import_path.default.join(
            componentBuildDir,
            `${componentName}.js`
          );
          await import_fs_extra.default.copy(jsSrc, destJsPath);
          console.log(`Copied ${componentName}.js to ${componentBuildDir}`);
        }
        const hasCSS = cssMatch.length > 0;
        if (cssMatch.length > 0) {
          const cssSrc = import_path.default.join(componentDir, cssMatch[0]);
          const destCssPath = import_path.default.join(
            componentBuildDir,
            `${componentName}.css`
          );
          await import_fs_extra.default.copy(cssSrc, destCssPath);
          console.log(`Copied ${componentName}.css to ${componentBuildDir}`);
        }
        components[componentName] = {
          templateTag: fullTemplate,
          hasJS,
          hasCSS
        };
      }
    }
  }
  return components;
}
async function updateIndex(components) {
  console.log(
    "Updated index.html with components:\n\n",
    JSON.stringify(components, null, 2)
  );
  const indexPath = import_path.default.resolve(options.index);
  let indexContent = await import_fs_extra.default.readFile(indexPath, "utf-8");
  const $ = cheerio.load(indexContent, { decodeEntities: false });
  $("head").prepend(
    `
  <script type="importmap">{ "imports": {      "@mr_hugo/boredom/dist/boreDOM.full.js": "./boreDOM.js",
       "boredom": "./boreDOM.js"
     } }</script>`
  );
  $("body").append(`
  <script src="boreDOM.js" type="module"></script>`);
  Object.keys(components).forEach((component) => {
    const componentScriptPath = buildRelativeServePath(
      componentsServeUrlPath,
      component,
      `${component}.js`
    );
    const componentCssPath = buildRelativeServePath(
      componentsServeUrlPath,
      component,
      `${component}.css`
    );
    if (components[component].hasJS && $(`script[src="${componentScriptPath}"]`).length === 0) {
      $("body").append(
        `
  <script src="${componentScriptPath}" type="module"></script>`
      );
    }
    if (components[component].hasCSS && $(`link[href="${componentCssPath}"]`).length === 0) {
      $("head").append(
        `
  <link rel="stylesheet" href="${componentCssPath}">`
      );
    }
    if ($(`template[data-component="${component}"]`).length === 0) {
      const templateMarkup = `
  ${components[component].templateTag}`;
      const firstScript = $("body > script").first();
      if (firstScript.length > 0) {
        firstScript.before(templateMarkup);
      } else {
        $("body").prepend(templateMarkup);
      }
      console.log(`Injected template for ${component}`);
    }
  });
  $("template[data-component]").each((i, el) => {
    const comp = $(el).attr("data-component");
    if (!components[comp]) {
      $(el).remove();
      console.log(`Removed unused template for ${comp}`);
    }
  });
  const prettyHtml = beautify($.html(), {
    indent_size: 2,
    space_in_empty_paren: true
  });
  const buildIndex = import_path.default.join(BUILD_DIR, "index.html");
  await import_fs_extra.default.outputFile(buildIndex, prettyHtml);
  console.log("Index updated with pretty printed HTML.");
}
async function startServer() {
  if (serverStarted) return;
  function serveFile(req, res, opts) {
    let urlPath = decodeURIComponent(req.url.split(/[?#]/)[0]);
    if (urlPath === "/" || urlPath.endsWith("/")) {
      urlPath = import_path.default.posix.join(urlPath, "index.html");
    }
    const filePath = import_path.default.join(BUILD_DIR, urlPath);
    import_fs_extra.default.pathExists(filePath).then((exists) => {
      if (!exists) {
        res.writeHead(404, { "Content-Type": "text/plain" });
        return res.end("Not Found");
      }
      const contentType = import_mime_types.default.lookup(filePath) || "application/octet-stream";
      res.writeHead(200, { "Content-Type": contentType });
      import_fs_extra.default.createReadStream(filePath).pipe(res);
    }).catch((err) => {
      res.writeHead(500, { "Content-Type": "text/plain" });
      res.end("Internal Server Error");
    });
  }
  const server = import_http.default.createServer((req, res) => {
    return serveFile(req, res, {
      cleanUrls: true,
      public: import_path.default.resolve(BUILD_DIR)
    });
  });
  let port = process.env.PORT || 8080;
  const serverHandler = () => {
    const { port: actualPort } = server.address();
    console.log(`Server running at http://localhost:${actualPort}`);
  };
  server.listen(port, serverHandler);
  server.on("error", (e) => {
    if (e.code === "EADDRINUSE") {
      console.log(
        "\x1B[33m%s\x1B[0m",
        `\u26A0\uFE0F Warning: Port ${port} in use, starting with a OS assigned port.`
      );
      setTimeout(() => {
        server.close();
        server.listen(0);
      }, 1e3);
    }
  });
  serverStarted = true;
}
async function build() {
  await import_fs_extra.default.remove(BUILD_DIR);
  await import_fs_extra.default.ensureDir(BUILD_DIR);
  await copyStatic();
  await copyBoreDOM();
  const components = await processComponents();
  await updateIndex(components);
}
async function watchFiles() {
  const pathsToWatch = [];
  if (options.index) {
    pathsToWatch.push(import_path.default.resolve(options.index));
  }
  if (options.html) {
    pathsToWatch.push(import_path.default.resolve(options.html));
  }
  const staticDir = import_path.default.resolve(options.static);
  if (await import_fs_extra.default.pathExists(staticDir)) {
    pathsToWatch.push(staticDir);
  }
  console.log("Watching for file changes in:", pathsToWatch);
  const watcher = import_chokidar.default.watch(pathsToWatch, { ignoreInitial: true });
  let rebuildTimeout;
  watcher.on("all", (event, filePath) => {
    console.log(`Detected ${event} on ${filePath}. Scheduling rebuild...`);
    if (rebuildTimeout) clearTimeout(rebuildTimeout);
    rebuildTimeout = setTimeout(() => {
      build().then(() => {
        console.log(
          `#${++numberOfRefreshes} - ${(/* @__PURE__ */ new Date()).toISOString()} - Build refreshed.`
        );
      }).catch((err) => console.error("Error during rebuild:", err));
    }, 100);
  });
}
async function main() {
  console.log("The file used as the base for HTML is:", options.index);
  const indexPath = import_path.default.join(process.cwd(), options.index);
  import_fs_extra.default.ensureFile(indexPath, (err) => {
    if (err) {
      console.log(
        "\x1B[31m%s\x1B[0m",
        `\u274C Error: The file "${indexPath}" was not found.
Please specify a location for it with "--index"`
      );
      process.exit(1);
    }
  });
  await build();
  startServer();
  await watchFiles();
}
if (!isTestMode) {
  main().catch((err) => {
    console.error(err);
    process.exit(1);
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BUILD_DIR,
  build,
  buildRelativeServePath,
  copyBoreDOM,
  getServePaths,
  normalizeServePath,
  options,
  processComponents,
  setServePaths,
  updateIndex
});
